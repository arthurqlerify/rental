import path from 'path';
import { fileURLToPath } from 'url';
import { loadFeature, defineFeature } from 'jest-cucumber';
import request from 'supertest';
import app from '../src/bootstrap/app.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const feature = loadFeature(path.resolve(__dirname, 'schedule-inspection-given-an-active-turnover.feature'));

defineFeature(feature, test => {
  let propertyId;
  let apartmentId;
  let leaseId;
  let turnoverId;
  let response;
  let inspectionId;

  const CURRENT_DATE = '2025-09-15T16:49:10.606Z'; // For context, not directly used for schedule date
  const MOVE_OUT_DATE = '2025-09-30T10:00:00.000Z';
  const SCHEDULED_INSPECTION_DATE = '2025-09-28T09:00:00.000Z'; // Before move-out

  test(
    'Given an active turnover and available inspection slots before or at move-out, When the PropertyMgr schedules the inspection with a date, time and inspector, Then Inspection Scheduled is recorded with the appointment details.',
    ({ given, when, then }) => {
      given('an active turnover and available inspection slots before or at move-out', async () => {
        // 1. Create a Property
        const createPropertyPayload = {
          name: 'Emerald Towers',
          address: '789 Green St',
          managerName: 'Jane Doe',
          managerEmail: 'jane.doe@example.com',
          unitsCount: '50',
        };
        const propertyRes = await request(app).post('/api/v1/create-property').send(createPropertyPayload);
        expect(propertyRes.statusCode).toBe(200);
        propertyId = propertyRes.body.id;

        // 2. Create an Apartment
        const createApartmentPayload = {
          propertyId: propertyId,
          unitNumber: '101A',
          floorAreaSqm: '75',
          bedrooms: '2',
          status: 'Occupied',
        };
        const apartmentRes = await request(app).post('/api/v1/create-apartment').send(createApartmentPayload);
        expect(apartmentRes.statusCode).toBe(200);
        apartmentId = apartmentRes.body.id;

        // 3. Schedule a Lease End to simulate an existing lease and its end process
        leaseId = `lease-${Date.now()}`;
        const scheduleLeaseEndPayload = {
          id: leaseId,
          apartmentId: apartmentId,
          endDate: '2025-09-30', // YYYY-MM-DD
          noticeDate: '2025-08-01',
          currentRent: '1800',
          nextActorEmail: 'ops@rentco.com',
        };
        const leaseRes = await request(app).post('/api/v1/schedule-lease-end').send(scheduleLeaseEndPayload);
        expect(leaseRes.statusCode).toBe(200);

        // 4. Create a Turnover based on the lease
        const createTurnoverPayload = {
          leaseId: leaseId,
          apartmentId: apartmentId,
          targetReadyDate: '2025-10-15', // YYYY-MM-DD
          propertyId: propertyId,
          nextActorEmail: 'inspections@rentco.com',
        };
        const turnoverRes = await request(app).post('/api/v1/create-turnover').send(createTurnoverPayload);
        expect(turnoverRes.statusCode).toBe(200);
        turnoverId = turnoverRes.body.id;

        // 5. Record Apartment Vacated to make the turnover 'active'
        const recordApartmentVacatedPayload = {
          id: turnoverId,
          apartmentId: apartmentId,
          vacatedAt: MOVE_OUT_DATE,
          keysReturned: 'true',
          notes: 'Tenant moved out on time.',
          nextActorEmail: 'inspections@rentco.com',
        };
        const vacatedRes = await request(app).post('/api/v1/record-apartment-vacated').send(recordApartmentVacatedPayload);
        expect(vacatedRes.statusCode).toBe(200);
      });

      when('the PropertyMgr schedules the inspection with a date, time and inspector', async () => {
        const scheduleInspectionPayload = {
          turnoverId: turnoverId,
          apartmentId: apartmentId,
          scheduledAt: SCHEDULED_INSPECTION_DATE,
          assignedToEmail: 'inspector@rentco.com',
          locationNotes: 'Keys available at front desk.',
          nextActorEmail: 'tenant@ex.com', // As per OpenAPI example
        };
        response = await request(app).post('/api/v1/schedule-inspection').send(scheduleInspectionPayload);
      });

      then('Inspection Scheduled is recorded with the appointment details.', async () => {
        expect(response.statusCode).toBe(200);
        expect(response.body).toBeDefined();
        expect(response.body.id).toBeDefined();
        inspectionId = response.body.id;

        expect(response.body.turnoverId).toBe(turnoverId);
        expect(response.body.apartmentId).toBe(apartmentId);
        expect(response.body.scheduledAt).toBe(SCHEDULED_INSPECTION_DATE);
        expect(response.body.assignedToEmail).toBe('inspector@rentco.com');
        // InspectorName is generated by the system, often derived from assignedToEmail
        expect(response.body.inspectorName).toBe('inspector@rentco.com'); // Assuming simple derivation
        expect(response.body.locationNotes).toBe('Keys available at front desk.');

        // Verify by retrieving the inspection
        const getInspectionRes = await request(app).get(`/api/v1/get-inspection-by-id/${inspectionId}`);
        expect(getInspectionRes.statusCode).toBe(200);
        expect(getInspectionRes.body.id).toBe(inspectionId);
        expect(getInspectionRes.body.turnoverId).toBe(turnoverId);
        expect(getInspectionRes.body.apartmentId).toBe(apartmentId);
        expect(getInspectionRes.body.scheduledAt).toBe(SCHEDULED_INSPECTION_DATE);
        expect(getInspectionRes.body.assignedToEmail).toBe('inspector@rentco.com');
        expect(getInspectionRes.body.inspectorName).toBe('inspector@rentco.com');
        expect(getInspectionRes.body.locationNotes).toBe('Keys available at front desk.');
      });
    }
  );
});